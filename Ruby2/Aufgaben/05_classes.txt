a. erstellen Sie eine Klasse mit der Bezeichnung Player

class Player
	
end

b. erstellen Sie ein Objekt player1 der Klasse

class Player
	
	def player1
		
	end 
end

c. erstellen Sie eine initialize - Methode, die die Parameter name und health hat und aus diesen Werten die Instanzvariablen @name und @health initialisiert

class Player
	def initialize(name, health)
		@name = name
		@health = health
	end
end

d. updaten Sie das Objekt player1 und lassen sich das objekt anzeigen

class Player
	def initialize(name, health)
		@name = name
		@health = health
	end
	def list_all
		"Name: #{@name} / Health: #{@health}"
	end
end

var = Player.new("Hans", 100)
puts var.list_all

e. setzen Sie fuer health einen Standardwert 100

class Player
	def initialize(name, health=100)
		@name = name
		@health = health
	end
	def player1
		"Name: #{@name} / Health: #{@health}"
	end
end

var = Player.new("Hans")
puts var.player

f. legen Sie eine neues Objekt player2 an, das nur den Namen als Parameter hat

class Player
	def initialize(name, health=100)
		@name = name
		@health = health
	end
	def player
		"Name: #{@name} / Health: #{@health}"
	end
	
end

var = Player.new("Hans")
var2 = Player.new("Peter", nil)
puts var.player
puts var2.player

g. passen Sie die say_hello - Methode aus der vorherigen Übung zur Ausgabe ein, so dass puts player1.say_hello die Ausgabe ergibt

class Player1
	def initialize(name, health=100)
		@name = name
		@health = health
		@set_time = Time.now.strftime("%H:%M")
	end

	def say_hello 
		"Ich bin #{@name} mit einem Wert von #{@health} um #{@set_time}."
	end
end

	var =  Player1.new("Ludwig", 50)
	puts var.say_hello

h. fuegen Sie eine Instanzmethode blam und w00t hinzu, die den Wert fuer health um 10 hochsetzt, bzw. reduziert und ausgibt: Tom got blamed, bzw. w00ted.

player1 = Player.new("Janz", 5000)
puts player1.say_hello
player1.w00t
puts player1.say_hello

--------------------------------------------

player2 = Player.new("Schmitt")
puts player1.say_hello
player1.blame
puts player1.say_hello


i. die say_hello - Methode soll aufgerufen werden, wenn nur das Objekt ausgegeben werden soll, also puts players erfolgt.

class Player

	def initialize(name, health=100)
		@name = name
		@health = health
	end

	def to_s #Funktioniert, da hinter player1 / player2 automatisch to_s steht
		"#{@name} hat #{@health}"
	end

	def w00t
		@health += 10 #Kurzform für -> @health = @health + 10
	end

	def blame
		@health -= 10
	end
end

player1 = Player.new("Janz", 5000)
puts player1	#Funktioniert, da hinter player1 / player2 automatisch to_s steht
player1.w00t
puts player1

player2 = Player.new("Schmitt")
puts player2	#Funktioniert, da hinter player1 / player2 automatisch to_s steht
player2.blame
puts player2